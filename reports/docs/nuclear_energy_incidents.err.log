Traceback (most recent call last):
  File "/Users/delaram/anaconda3/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/delaram/anaconda3/lib/python3.11/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/delaram/anaconda3/lib/python3.11/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/delaram/anaconda3/lib/python3.11/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/delaram/anaconda3/lib/python3.11/asyncio/base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/Users/delaram/anaconda3/lib/python3.11/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/Users/delaram/anaconda3/lib/python3.11/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/delaram/anaconda3/lib/python3.11/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------

# # import pandas as pd
# # import plotly.express as px

# # Load the sustainable energy data
energy_df = pd.read_csv('nuclear_data/global-data-on-sustainable-energy (1).csv')

# # # Calculate the percentage of nuclear electricity
# # energy_df['Nuclear_Electricity_Percentage'] = (energy_df['Electricity from nuclear (TWh)'] /
# #                                              (energy_df['Electricity from fossil fuels (TWh)'] +
# #                                               energy_df['Electricity from nuclear (TWh)'] +
# #                                               energy_df['Electricity from renewables (TWh)'])) * 100

# # # Replace NaN values with 0 for better visualization
# # energy_df['Nuclear_Electricity_Percentage'] = energy_df['Nuclear_Electricity_Percentage'].fillna(0)

# # Load the nuclear incidents data
incidents_df = pd.read_csv("nuclear_data/Nuclear Incidents - Sheet3.csv")

# # # Clean and prepare incidents data
# # incidents_df.columns = incidents_df.columns.str.strip()
# # incidents_df.columns.values[6] = "INES level"

# # incidents_df['Numbers of Direct Deaths'] = incidents_df['Numbers of Direct Deaths'].replace('', pd.NA).fillna('Unknown')
# # incidents_df['Numbers of InDirect Deaths'] = incidents_df['Numbers of InDirect Deaths'].replace('', pd.NA).fillna('Unknown')
# # incidents_df['INES level'] = incidents_df['INES level'].replace('', pd.NA).fillna('Unknown')

# # incidents_df['hover_text'] = (
# #     "<b>Incident:</b> " + incidents_df['Incident'] + "<br>" +
# #     "<b>Location:</b> " + incidents_df['Location'] + "<br>" +
# #     "<b>Date:</b> " + incidents_df['Date'] + "<br>" +
# #     "<b>Direct Deaths:</b> " + incidents_df['Numbers of Direct Deaths'].astype(str) + "<br>" +
# #     "<b>Indirect Deaths:</b> " + incidents_df['Numbers of InDirect Deaths'].astype(str) + "<br>" +
# #     "<b>Category:</b> " + incidents_df['Category'] + "<br>" +
# #     "<b>INES Level:</b> " + incidents_df['INES level'].astype(str) + "<br>" +
# #     "<b>Latitude:</b> " + incidents_df['Latitude'].astype(str) + "<br>" +
# #     "<b>Longitude:</b> " + incidents_df['Longitude'].astype(str)
# # )

# # # Create the base map with nuclear energy percentage
# # fig = px.choropleth(energy_df,
# #                     locations="Entity",
# #                     locationmode="country names",
# #                     color="Nuclear_Electricity_Percentage",
# #                     hover_name="Entity",
# #                     hover_data=["Year", "Electricity from nuclear (TWh)"],
# #                     animation_frame="Year",
# #                     color_continuous_scale=px.colors.sequential.Plasma,
# #                     range_color=[0, 100],
# #                     title="Nuclear Energy Use and Incidents Worldwide",
# #                     labels={'Nuclear_Electricity_Percentage':'Nuclear Electricity (%)'},
# #                     height=600)

# # # Add nuclear incidents as scatter points
# # fig.add_trace(
# #     px.scatter_geo(incidents_df,
# #                    lat='Latitude',
# #                    lon='Longitude',
# #                    hover_name='Incident',
# #                    hover_data={'Latitude': False, 'Longitude': False},
# #                    custom_data=['hover_text'],
# #                    color_discrete_sequence=['yellow']).data[0]  # Kleur veranderd naar geel
# # )

# # # Update layout and traces
# # fig.update_traces(
# #     selector=dict(type='choropleth'),
# #     marker_line_width=0.5,
# #     marker_line_color='white'
# # )

# # fig.update_traces(
# #     selector=dict(type='scattergeo'),
# #     hovertemplate="%{customdata[0]}<extra></extra>",
# #     marker=dict(size=10, symbol='circle', color='yellow')  # Nu een gele cirkel
# # )

# # fig.update_layout(
# #     margin={"r": 0, "t": 40, "l": 0, "b": 0},
# #     geo=dict(
# #         showframe=False,
# #         showcoastlines=True,
# #         projection_type='natural earth'
# #     ),
# #     coloraxis_colorbar=dict(
# #         title="Nuclear %",
# #         thickness=15,
# #         len=0.75
# #     ),
# #     sliders=[{
# #         "active": 0,
# #         "yanchor": "top",
# #         "xanchor": "left",
# #         "currentvalue": {
# #             "font": {"size": 20},
# #             "prefix": "Year:",
# #             "visible": True,
# #             "xanchor": "right"
# #         },
# #         "transition": {"duration": 300, "easing": "cubic-in-out"},
# #         "pad": {"b": 10, "t": 50},
# #         "len": 0.9,
# #         "x": 0.1,
# #         "y": 0
# #     }]
# # )

# # # Adjust animation settings
# # fig.layout.updatemenus[0].buttons[0].args[1]["frame"]["duration"] = 500
# # fig.layout.updatemenus[0].buttons[0].args[1]["transition"]["duration"] = 500

# # fig.show()

# import pandas as pd
# import plotly.express as px

# # Load the sustainable energy data
#  energy_df = pd.read_csv('nuclear_data/global-data-on-sustainable-energy (1).csv')

# # Calculate the percentage of nuclear electricity
# energy_df['Nuclear_Electricity_Percentage'] = (energy_df['Electricity from nuclear (TWh)'] /
#                                              (energy_df['Electricity from fossil fuels (TWh)'] +
#                                               energy_df['Electricity from nuclear (TWh)'] +
#                                               energy_df['Electricity from renewables (TWh)'])) * 100

# # Replace NaN values with 0 for better visualization
# energy_df['Nuclear_Electricity_Percentage'] = energy_df['Nuclear_Electricity_Percentage'].fillna(0)

# # Load the nuclear incidents data
# incidents_df = pd.read_csv("nuclear_data/Nuclear Incidents - Sheet3.csv")

# # Clean and prepare incidents data
# incidents_df.columns = incidents_df.columns.str.strip()
# incidents_df.columns.values[6] = "INES level"

# incidents_df['Numbers of Direct Deaths'] = incidents_df['Numbers of Direct Deaths'].replace('', pd.NA).fillna('Unknown')
# incidents_df['Numbers of InDirect Deaths'] = incidents_df['Numbers of InDirect Deaths'].replace('', pd.NA).fillna('Unknown')
# incidents_df['INES level'] = incidents_df['INES level'].replace('', pd.NA).fillna('Unknown')

# incidents_df['hover_text'] = (
#     "<b>Incident:</b> " + incidents_df['Incident'] + "<br>" +
#     "<b>Location:</b> " + incidents_df['Location'] + "<br>" +
#     "<b>Date:</b> " + incidents_df['Date'] + "<br>" +
#     "<b>Direct Deaths:</b> " + incidents_df['Numbers of Direct Deaths'].astype(str) + "<br>" +
#     "<b>Indirect Deaths:</b> " + incidents_df['Numbers of InDirect Deaths'].astype(str) + "<br>" +
#     "<b>Category:</b> " + incidents_df['Category'] + "<br>" +
#     "<b>INES Level:</b> " + incidents_df['INES level'].astype(str) + "<br>" +
#     "<b>Latitude:</b> " + incidents_df['Latitude'].astype(str) + "<br>" +
#     "<b>Longitude:</b> " + incidents_df['Longitude'].astype(str)
# )

# # Create the base map with nuclear energy percentage
# # fig = px.choropleth(energy_df,
# #                     locations="Entity",
# #                     locationmode="country names",
# #                     color="Nuclear_Electricity_Percentage",
# #                     hover_name="Entity",
# #                     hover_data=["Year", "Electricity from nuclear (TWh)"],
# #                     animation_frame="Year",
# #                     color_continuous_scale=px.colors.sequential.Plasma,
# #                     range_color=[0, 100],
# #                     title="Nuclear Energy Use and Incidents Worldwide",
# #                     labels={'Nuclear_Electricity_Percentage':'Nuclear Electricity (%)'},
# #                     height=600)
# fig = px.choropleth(energy_df,
#                     locations="Entity",
#                     locationmode="country names",
#                     color="Nuclear_Electricity_Percentage",
#                     hover_name="Entity",
#                     hover_data=["Year", "Electricity from nuclear (TWh)"],
#                     animation_frame="Year",
#                     color_continuous_scale=['#D32F2F', '#F44336', '#FF5722', '#FF9800', '#FFC107', '#FFEB3B', '#CDDC39', '#8BC34A', '#4CAF50', '#008000'],
#                     range_color=[0, 100],
#                     title="Nuclear Energy Use and Incidents Worldwide",
#                     labels={'Nuclear_Electricity_Percentage':'Nuclear Electricity (%)'},
#                     height=600)

# # Add nuclear incidents as scatter points
# fig.add_trace(
#     px.scatter_geo(incidents_df,
#                    lat='Latitude',
#                    lon='Longitude',
#                    hover_name='Incident',
#                    hover_data={'Latitude': False, 'Longitude': False},
#                    custom_data=['hover_text'],
#                    color_discrete_sequence=['yellow']).data[0]  # Kleur veranderd naar geel
# )

# # Create the base map with nuclear energy percentage
# # fig = px.choropleth(energy_df,
# #                     locations="Entity",
# #                     locationmode="country names",
# #                     color="Nuclear_Electricity_Percentage",
# #                     hover_name="Entity",
# #                     hover_data=["Year", "Electricity from nuclear (TWh)"],
# #                     animation_frame="Year",
# #                     color_continuous_scale=['#008000', '#4CAF50', '#8BC34A', '#CDDC39', '#FFEB3B', '#FFC107', '#FF9800', '#FF5722', '#F44336', '#D32F2F'],
# #                     range_color=[0, 100],
# #                     title="Nuclear Energy Use and Incidents Worldwide",
# #                     labels={'Nuclear_Electricity_Percentage':'Nuclear Electricity (%)'},
# #                     height=600)
# fig.update_traces(
#     selector=dict(type='scattergeo'),
#     marker=dict(size=12, symbol='x', color='#39706d'),
#     hovertemplate="%{customdata[0]}<extra></extra>"
# )

# # Update layout and traces
# fig.update_traces(
#     selector=dict(type='choropleth'),
#     marker_line_width=0.5,
#     marker_line_color='white'
# )

# # fig.update_traces(
# #     selector=dict(type='scattergeo'),
# #     hovertemplate="%{customdata[0]}<extra></extra>",
# #     marker=dict(size=10, symbol='circle', color='yellow')  # Nu een gele cirkel
# # )

# fig.update_layout(
#     margin={"r": 0, "t": 40, "l": 0, "b": 0},
#     geo=dict(
#         showframe=False,
#         showcoastlines=True,
#         projection_type='natural earth'
#     ),
#     coloraxis_colorbar=dict(
#         title="Nuclear %",
#         thickness=15,
#         len=0.75
#     ),
#     sliders=[{
#         "active": 0,
#         "yanchor": "top",
#         "xanchor": "left",
#         "currentvalue": {
#             "font": {"size": 20},
#             "prefix": "Year:",
#             "visible": True,
#             "xanchor": "right"
#         },
#         "transition": {"duration": 300, "easing": "cubic-in-out"},
#         "pad": {"b": 10, "t": 50},
#         "len": 0.9,
#         "x": 0.1,
#         "y": 0
#     }]
# )

# # Adjust animation settings
# fig.layout.updatemenus[0].buttons[0].args[1]["frame"]["duration"] = 500
# fig.layout.updatemenus[0].buttons[0].args[1]["transition"]["duration"] = 500



# fig.show()

import pandas as pd
import plotly.express as px

# Load the sustainable energy data

# Calculate the percentage of nuclear electricity
energy_df['Nuclear_Electricity_Percentage'] = (energy_df['Electricity from nuclear (TWh)'] /
                                             (energy_df['Electricity from fossil fuels (TWh)'] +
                                              energy_df['Electricity from nuclear (TWh)'] +
                                              energy_df['Electricity from renewables (TWh)'])) * 100

# Replace NaN values with 0 for better visualization
energy_df['Nuclear_Electricity_Percentage'] = energy_df['Nuclear_Electricity_Percentage'].fillna(0)

# Load the nuclear incidents data


# Clean and prepare incidents data
incidents_df.columns = incidents_df.columns.str.strip()
incidents_df.columns.values[6] = "INES level"

# Convert deaths to numeric, treating 'Unknown' as 0
incidents_df['Numbers of Direct Deaths'] = pd.to_numeric(incidents_df['Numbers of Direct Deaths'].replace('', '0').replace('Unknown', '0'), errors='coerce').fillna(0)
incidents_df['Numbers of InDirect Deaths'] = pd.to_numeric(incidents_df['Numbers of InDirect Deaths'].replace('', '0').replace('Unknown', '0'), errors='coerce').fillna(0)

# Calculate total deaths
incidents_df['Total Deaths'] = incidents_df['Numbers of Direct Deaths'] + incidents_df['Numbers of InDirect Deaths']

# Create size mapping - scale deaths to marker size (minimum size 8, maximum size 30)
incidents_df['Marker Size'] = incidents_df['Total Deaths'].apply(
    lambda x: 8 if x == 0 else min(30, 8 + x * 0.5)  # Adjust the multiplier as needed
)

incidents_df['INES level'] = incidents_df['INES level'].replace('', pd.NA).fillna('Unknown')

incidents_df['hover_text'] = (
    "<b>Incident:</b> " + incidents_df['Incident'] + "<br>" +
    "<b>Location:</b> " + incidents_df['Location'] + "<br>" +
    "<b>Date:</b> " + incidents_df['Date'] + "<br>" +
    "<b>Direct Deaths:</b> " + incidents_df['Numbers of Direct Deaths'].astype(str) + "<br>" +
    "<b>Indirect Deaths:</b> " + incidents_df['Numbers of InDirect Deaths'].astype(str) + "<br>" +
    "<b>Total Deaths:</b> " + incidents_df['Total Deaths'].astype(str) + "<br>" +
    "<b>Category:</b> " + incidents_df['Category'] + "<br>" +
    "<b>INES Level:</b> " + incidents_df['INES level'].astype(str) + "<br>" +
    "<b>Latitude:</b> " + incidents_df['Latitude'].astype(str) + "<br>" +
    "<b>Longitude:</b> " + incidents_df['Longitude'].astype(str)
)

# Create the base map with nuclear energy percentage
fig = px.choropleth(energy_df,
                    locations="Entity",
                    locationmode="country names",
                    color="Nuclear_Electricity_Percentage",
                    hover_name="Entity",
                    hover_data=["Year", "Electricity from nuclear (TWh)"],
                    animation_frame="Year",
                    color_continuous_scale=['#D32F2F', '#F44336', '#FF5722', '#FF9800', '#FFC107', '#FFEB3B', '#CDDC39', '#8BC34A', '#4CAF50', '#008000'],
                    range_color=[0, 100],
                    title="Nuclear Energy Use and Incidents Worldwide",
                    labels={'Nuclear_Electricity_Percentage':'Nuclear Electricity (%)'},
                    height=600)

# Add nuclear incidents as scatter points with size based on deaths
fig.add_trace(
    px.scatter_geo(incidents_df,
                   lat='Latitude',
                   lon='Longitude',
                   hover_name='Incident',
                   hover_data={'Latitude': False, 'Longitude': False},
                   custom_data=['hover_text'],
                   size='Marker Size',  # Use the calculated marker size
                   size_max=30,  # Maximum size for the largest markers
                   color_discrete_sequence=['#39706d']).data[0]
)

# Update traces for the scatter points
fig.update_traces(
    selector=dict(type='scattergeo'),
    marker=dict(symbol='x'),
    hovertemplate="%{customdata[0]}<extra></extra>"
)

# Update layout and traces
fig.update_traces(
    selector=dict(type='choropleth'),
    marker_line_width=0.5,
    marker_line_color='white'
)

fig.update_layout(
    margin={"r": 0, "t": 40, "l": 0, "b": 0},
    geo=dict(
        showframe=False,
        showcoastlines=True,
        projection_type='natural earth'
    ),
    coloraxis_colorbar=dict(
        title="Nuclear %",
        thickness=15,
        len=0.75
    ),
    sliders=[{
        "active": 0,
        "yanchor": "top",
        "xanchor": "left",
        "currentvalue": {
            "font": {"size": 20},
            "prefix": "Year:",
            "visible": True,
            "xanchor": "right"
        },
        "transition": {"duration": 300, "easing": "cubic-in-out"},
        "pad": {"b": 10, "t": 50},
        "len": 0.9,
        "x": 0.1,
        "y": 0
    }]
)

# Adjust animation settings
fig.layout.updatemenus[0].buttons[0].args[1]["frame"]["duration"] = 500
fig.layout.updatemenus[0].buttons[0].args[1]["transition"]["duration"] = 500

fig.show()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[1], line 5[0m
[1;32m      1[0m [38;5;66;03m# # import pandas as pd[39;00m
[1;32m      2[0m [38;5;66;03m# # import plotly.express as px[39;00m
[1;32m      3[0m 
[1;32m      4[0m [38;5;66;03m# # Load the sustainable energy data[39;00m
[0;32m----> 5[0m energy_df [38;5;241m=[39m pd[38;5;241m.[39mread_csv([38;5;124m'[39m[38;5;124mnuclear_data/global-data-on-sustainable-energy (1).csv[39m[38;5;124m'[39m)
[1;32m      7[0m [38;5;66;03m# # # Calculate the percentage of nuclear electricity[39;00m
[1;32m      8[0m [38;5;66;03m# # energy_df['Nuclear_Electricity_Percentage'] = (energy_df['Electricity from nuclear (TWh)'] /[39;00m
[1;32m      9[0m [38;5;66;03m# #                                              (energy_df['Electricity from fossil fuels (TWh)'] +[39;00m
[0;32m   (...)[0m
[1;32m     15[0m 
[1;32m     16[0m [38;5;66;03m# # Load the nuclear incidents data[39;00m
[1;32m     17[0m incidents_df [38;5;241m=[39m pd[38;5;241m.[39mread_csv([38;5;124m"[39m[38;5;124mnuclear_data/Nuclear Incidents - Sheet3.csv[39m[38;5;124m"[39m)

[0;31mNameError[0m: name 'pd' is not defined
NameError: name 'pd' is not defined

