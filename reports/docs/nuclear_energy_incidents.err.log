Traceback (most recent call last):
  File "/Users/delaram/anaconda3/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/delaram/anaconda3/lib/python3.11/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/delaram/anaconda3/lib/python3.11/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/delaram/anaconda3/lib/python3.11/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/delaram/anaconda3/lib/python3.11/asyncio/base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/Users/delaram/anaconda3/lib/python3.11/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/Users/delaram/anaconda3/lib/python3.11/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/delaram/anaconda3/lib/python3.11/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------

# import pandas as pd
# import plotly.express as px

# # Load the sustainable energy data
# energy_df = pd.read_csv('nuclear_data/global-data-on-sustainable-energy (1).csv')

# # Calculate the percentage of nuclear electricity
# energy_df['Nuclear_Electricity_Percentage'] = (energy_df['Electricity from nuclear (TWh)'] /
#                                              (energy_df['Electricity from fossil fuels (TWh)'] +
#                                               energy_df['Electricity from nuclear (TWh)'] +
#                                               energy_df['Electricity from renewables (TWh)'])) * 100

# # Replace NaN values with 0 for better visualization
# energy_df['Nuclear_Electricity_Percentage'] = energy_df['Nuclear_Electricity_Percentage'].fillna(0)

# # Load the nuclear incidents data
# incidents_df = pd.read_csv("nuclear_data/Nuclear Incidents - Sheet3.csv")

# # Clean and prepare incidents data
# incidents_df.columns = incidents_df.columns.str.strip()
# incidents_df.columns.values[6] = "INES level"

# incidents_df['Numbers of Direct Deaths'] = incidents_df['Numbers of Direct Deaths'].replace('', pd.NA).fillna('Unknown')
# incidents_df['Numbers of InDirect Deaths'] = incidents_df['Numbers of InDirect Deaths'].replace('', pd.NA).fillna('Unknown')
# incidents_df['INES level'] = incidents_df['INES level'].replace('', pd.NA).fillna('Unknown')

# incidents_df['hover_text'] = (
#     "<b>Incident:</b> " + incidents_df['Incident'] + "<br>" +
#     "<b>Location:</b> " + incidents_df['Location'] + "<br>" +
#     "<b>Date:</b> " + incidents_df['Date'] + "<br>" +
#     "<b>Direct Deaths:</b> " + incidents_df['Numbers of Direct Deaths'].astype(str) + "<br>" +
#     "<b>Indirect Deaths:</b> " + incidents_df['Numbers of InDirect Deaths'].astype(str) + "<br>" +
#     "<b>Category:</b> " + incidents_df['Category'] + "<br>" +
#     "<b>INES Level:</b> " + incidents_df['INES level'].astype(str) + "<br>" +
#     "<b>Latitude:</b> " + incidents_df['Latitude'].astype(str) + "<br>" +
#     "<b>Longitude:</b> " + incidents_df['Longitude'].astype(str)
# )

# # Create the base map with nuclear energy percentage
# fig = px.choropleth(energy_df,
#                     locations="Entity",
#                     locationmode="country names",
#                     color="Nuclear_Electricity_Percentage",
#                     hover_name="Entity",
#                     hover_data=["Year", "Electricity from nuclear (TWh)"],
#                     animation_frame="Year",
#                     color_continuous_scale=px.colors.sequential.Plasma,
#                     range_color=[0, 100],
#                     title="Nuclear Energy Use and Incidents Worldwide",
#                     labels={'Nuclear_Electricity_Percentage':'Nuclear Electricity (%)'},
#                     height=600)

# # Add nuclear incidents as scatter points
# fig.add_trace(
#     px.scatter_geo(incidents_df,
#                    lat='Latitude',
#                    lon='Longitude',
#                    hover_name='Incident',
#                    hover_data={'Latitude': False, 'Longitude': False},
#                    custom_data=['hover_text'],
#                    color_discrete_sequence=['yellow']).data[0]  # Kleur veranderd naar geel
# )

# # Update layout and traces
# fig.update_traces(
#     selector=dict(type='choropleth'),
#     marker_line_width=0.5,
#     marker_line_color='white'
# )

# fig.update_traces(
#     selector=dict(type='scattergeo'),
#     hovertemplate="%{customdata[0]}<extra></extra>",
#     marker=dict(size=10, symbol='circle', color='yellow')  # Nu een gele cirkel
# )

# fig.update_layout(
#     margin={"r": 0, "t": 40, "l": 0, "b": 0},
#     geo=dict(
#         showframe=False,
#         showcoastlines=True,
#         projection_type='natural earth'
#     ),
#     coloraxis_colorbar=dict(
#         title="Nuclear %",
#         thickness=15,
#         len=0.75
#     ),
#     sliders=[{
#         "active": 0,
#         "yanchor": "top",
#         "xanchor": "left",
#         "currentvalue": {
#             "font": {"size": 20},
#             "prefix": "Year:",
#             "visible": True,
#             "xanchor": "right"
#         },
#         "transition": {"duration": 300, "easing": "cubic-in-out"},
#         "pad": {"b": 10, "t": 50},
#         "len": 0.9,
#         "x": 0.1,
#         "y": 0
#     }]
# )

# # Adjust animation settings
# fig.layout.updatemenus[0].buttons[0].args[1]["frame"]["duration"] = 500
# fig.layout.updatemenus[0].buttons[0].args[1]["transition"]["duration"] = 500

# fig.show()

import pandas as pd
import plotly.express as px

# Load the sustainable energy data
energy_df = pd.read_csv('global-data-on-sustainable-energy.csv')

# Calculate the percentage of nuclear electricity
energy_df['Nuclear_Electricity_Percentage'] = (energy_df['Electricity from nuclear (TWh)'] /
                                             (energy_df['Electricity from fossil fuels (TWh)'] +
                                              energy_df['Electricity from nuclear (TWh)'] +
                                              energy_df['Electricity from renewables (TWh)'])) * 100

# Replace NaN values with 0 for better visualization
energy_df['Nuclear_Electricity_Percentage'] = energy_df['Nuclear_Electricity_Percentage'].fillna(0)

# Load the nuclear incidents data
incidents_df = pd.read_csv("Nuclear Incidents - Sheet3.csv")

# Clean and prepare incidents data
incidents_df.columns = incidents_df.columns.str.strip()
incidents_df.columns.values[6] = "INES level"

incidents_df['Numbers of Direct Deaths'] = incidents_df['Numbers of Direct Deaths'].replace('', pd.NA).fillna('Unknown')
incidents_df['Numbers of InDirect Deaths'] = incidents_df['Numbers of InDirect Deaths'].replace('', pd.NA).fillna('Unknown')
incidents_df['INES level'] = incidents_df['INES level'].replace('', pd.NA).fillna('Unknown')

incidents_df['hover_text'] = (
    "<b>Incident:</b> " + incidents_df['Incident'] + "<br>" +
    "<b>Location:</b> " + incidents_df['Location'] + "<br>" +
    "<b>Date:</b> " + incidents_df['Date'] + "<br>" +
    "<b>Direct Deaths:</b> " + incidents_df['Numbers of Direct Deaths'].astype(str) + "<br>" +
    "<b>Indirect Deaths:</b> " + incidents_df['Numbers of InDirect Deaths'].astype(str) + "<br>" +
    "<b>Category:</b> " + incidents_df['Category'] + "<br>" +
    "<b>INES Level:</b> " + incidents_df['INES level'].astype(str) + "<br>" +
    "<b>Latitude:</b> " + incidents_df['Latitude'].astype(str) + "<br>" +
    "<b>Longitude:</b> " + incidents_df['Longitude'].astype(str)
)

# Create the base map with nuclear energy percentage
# fig = px.choropleth(energy_df,
#                     locations="Entity",
#                     locationmode="country names",
#                     color="Nuclear_Electricity_Percentage",
#                     hover_name="Entity",
#                     hover_data=["Year", "Electricity from nuclear (TWh)"],
#                     animation_frame="Year",
#                     color_continuous_scale=px.colors.sequential.Plasma,
#                     range_color=[0, 100],
#                     title="Nuclear Energy Use and Incidents Worldwide",
#                     labels={'Nuclear_Electricity_Percentage':'Nuclear Electricity (%)'},
#                     height=600)
fig = px.choropleth(energy_df,
                    locations="Entity",
                    locationmode="country names",
                    color="Nuclear_Electricity_Percentage",
                    hover_name="Entity",
                    hover_data=["Year", "Electricity from nuclear (TWh)"],
                    animation_frame="Year",
                    color_continuous_scale=['#D32F2F', '#F44336', '#FF5722', '#FF9800', '#FFC107', '#FFEB3B', '#CDDC39', '#8BC34A', '#4CAF50', '#008000'],
                    range_color=[0, 100],
                    title="Nuclear Energy Use and Incidents Worldwide",
                    labels={'Nuclear_Electricity_Percentage':'Nuclear Electricity (%)'},
                    height=600)

# Add nuclear incidents as scatter points
fig.add_trace(
    px.scatter_geo(incidents_df,
                   lat='Latitude',
                   lon='Longitude',
                   hover_name='Incident',
                   hover_data={'Latitude': False, 'Longitude': False},
                   custom_data=['hover_text'],
                   color_discrete_sequence=['yellow']).data[0]  # Kleur veranderd naar geel
)

# Create the base map with nuclear energy percentage
# fig = px.choropleth(energy_df,
#                     locations="Entity",
#                     locationmode="country names",
#                     color="Nuclear_Electricity_Percentage",
#                     hover_name="Entity",
#                     hover_data=["Year", "Electricity from nuclear (TWh)"],
#                     animation_frame="Year",
#                     color_continuous_scale=['#008000', '#4CAF50', '#8BC34A', '#CDDC39', '#FFEB3B', '#FFC107', '#FF9800', '#FF5722', '#F44336', '#D32F2F'],
#                     range_color=[0, 100],
#                     title="Nuclear Energy Use and Incidents Worldwide",
#                     labels={'Nuclear_Electricity_Percentage':'Nuclear Electricity (%)'},
#                     height=600)
fig.update_traces(
    selector=dict(type='scattergeo'),
    marker=dict(size=12, symbol='x', color='#39706d'),
    hovertemplate="%{customdata[0]}<extra></extra>"
)

# Update layout and traces
fig.update_traces(
    selector=dict(type='choropleth'),
    marker_line_width=0.5,
    marker_line_color='white'
)

# fig.update_traces(
#     selector=dict(type='scattergeo'),
#     hovertemplate="%{customdata[0]}<extra></extra>",
#     marker=dict(size=10, symbol='circle', color='yellow')  # Nu een gele cirkel
# )

fig.update_layout(
    margin={"r": 0, "t": 40, "l": 0, "b": 0},
    geo=dict(
        showframe=False,
        showcoastlines=True,
        projection_type='natural earth'
    ),
    coloraxis_colorbar=dict(
        title="Nuclear %",
        thickness=15,
        len=0.75
    ),
    sliders=[{
        "active": 0,
        "yanchor": "top",
        "xanchor": "left",
        "currentvalue": {
            "font": {"size": 20},
            "prefix": "Year:",
            "visible": True,
            "xanchor": "right"
        },
        "transition": {"duration": 300, "easing": "cubic-in-out"},
        "pad": {"b": 10, "t": 50},
        "len": 0.9,
        "x": 0.1,
        "y": 0
    }]
)

# Adjust animation settings
fig.layout.updatemenus[0].buttons[0].args[1]["frame"]["duration"] = 500
fig.layout.updatemenus[0].buttons[0].args[1]["transition"]["duration"] = 500



fig.show()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mFileNotFoundError[0m                         Traceback (most recent call last)
Cell [0;32mIn[1], line 117[0m
[1;32m    114[0m [38;5;28;01mimport[39;00m[38;5;250m [39m[38;5;21;01mplotly[39;00m[38;5;21;01m.[39;00m[38;5;21;01mexpress[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[38;5;21;01mpx[39;00m
[1;32m    116[0m [38;5;66;03m# Load the sustainable energy data[39;00m
[0;32m--> 117[0m energy_df [38;5;241m=[39m pd[38;5;241m.[39mread_csv([38;5;124m'[39m[38;5;124mglobal-data-on-sustainable-energy.csv[39m[38;5;124m'[39m)
[1;32m    119[0m [38;5;66;03m# Calculate the percentage of nuclear electricity[39;00m
[1;32m    120[0m energy_df[[38;5;124m'[39m[38;5;124mNuclear_Electricity_Percentage[39m[38;5;124m'[39m] [38;5;241m=[39m (energy_df[[38;5;124m'[39m[38;5;124mElectricity from nuclear (TWh)[39m[38;5;124m'[39m] [38;5;241m/[39m
[1;32m    121[0m                                              (energy_df[[38;5;124m'[39m[38;5;124mElectricity from fossil fuels (TWh)[39m[38;5;124m'[39m] [38;5;241m+[39m
[1;32m    122[0m                                               energy_df[[38;5;124m'[39m[38;5;124mElectricity from nuclear (TWh)[39m[38;5;124m'[39m] [38;5;241m+[39m
[1;32m    123[0m                                               energy_df[[38;5;124m'[39m[38;5;124mElectricity from renewables (TWh)[39m[38;5;124m'[39m])) [38;5;241m*[39m [38;5;241m100[39m

File [0;32m~/anaconda3/lib/python3.11/site-packages/pandas/io/parsers/readers.py:912[0m, in [0;36mread_csv[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)[0m
[1;32m    899[0m kwds_defaults [38;5;241m=[39m _refine_defaults_read(
[1;32m    900[0m     dialect,
[1;32m    901[0m     delimiter,
[0;32m   (...)[0m
[1;32m    908[0m     dtype_backend[38;5;241m=[39mdtype_backend,
[1;32m    909[0m )
[1;32m    910[0m kwds[38;5;241m.[39mupdate(kwds_defaults)
[0;32m--> 912[0m [38;5;28;01mreturn[39;00m _read(filepath_or_buffer, kwds)

File [0;32m~/anaconda3/lib/python3.11/site-packages/pandas/io/parsers/readers.py:577[0m, in [0;36m_read[0;34m(filepath_or_buffer, kwds)[0m
[1;32m    574[0m _validate_names(kwds[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mnames[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m))
[1;32m    576[0m [38;5;66;03m# Create the parser.[39;00m
[0;32m--> 577[0m parser [38;5;241m=[39m TextFileReader(filepath_or_buffer, [38;5;241m*[39m[38;5;241m*[39mkwds)
[1;32m    579[0m [38;5;28;01mif[39;00m chunksize [38;5;129;01mor[39;00m iterator:
[1;32m    580[0m     [38;5;28;01mreturn[39;00m parser

File [0;32m~/anaconda3/lib/python3.11/site-packages/pandas/io/parsers/readers.py:1407[0m, in [0;36mTextFileReader.__init__[0;34m(self, f, engine, **kwds)[0m
[1;32m   1404[0m     [38;5;28mself[39m[38;5;241m.[39moptions[[38;5;124m"[39m[38;5;124mhas_index_names[39m[38;5;124m"[39m] [38;5;241m=[39m kwds[[38;5;124m"[39m[38;5;124mhas_index_names[39m[38;5;124m"[39m]
[1;32m   1406[0m [38;5;28mself[39m[38;5;241m.[39mhandles: IOHandles [38;5;241m|[39m [38;5;28;01mNone[39;00m [38;5;241m=[39m [38;5;28;01mNone[39;00m
[0;32m-> 1407[0m [38;5;28mself[39m[38;5;241m.[39m_engine [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_make_engine(f, [38;5;28mself[39m[38;5;241m.[39mengine)

File [0;32m~/anaconda3/lib/python3.11/site-packages/pandas/io/parsers/readers.py:1661[0m, in [0;36mTextFileReader._make_engine[0;34m(self, f, engine)[0m
[1;32m   1659[0m     [38;5;28;01mif[39;00m [38;5;124m"[39m[38;5;124mb[39m[38;5;124m"[39m [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m mode:
[1;32m   1660[0m         mode [38;5;241m+[39m[38;5;241m=[39m [38;5;124m"[39m[38;5;124mb[39m[38;5;124m"[39m
[0;32m-> 1661[0m [38;5;28mself[39m[38;5;241m.[39mhandles [38;5;241m=[39m get_handle(
[1;32m   1662[0m     f,
[1;32m   1663[0m     mode,
[1;32m   1664[0m     encoding[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39moptions[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mencoding[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m),
[1;32m   1665[0m     compression[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39moptions[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mcompression[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m),
[1;32m   1666[0m     memory_map[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39moptions[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mmemory_map[39m[38;5;124m"[39m, [38;5;28;01mFalse[39;00m),
[1;32m   1667[0m     is_text[38;5;241m=[39mis_text,
[1;32m   1668[0m     errors[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39moptions[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mencoding_errors[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124mstrict[39m[38;5;124m"[39m),
[1;32m   1669[0m     storage_options[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39moptions[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mstorage_options[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m),
[1;32m   1670[0m )
[1;32m   1671[0m [38;5;28;01massert[39;00m [38;5;28mself[39m[38;5;241m.[39mhandles [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m
[1;32m   1672[0m f [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mhandles[38;5;241m.[39mhandle

File [0;32m~/anaconda3/lib/python3.11/site-packages/pandas/io/common.py:859[0m, in [0;36mget_handle[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)[0m
[1;32m    854[0m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(handle, [38;5;28mstr[39m):
[1;32m    855[0m     [38;5;66;03m# Check whether the filename is to be opened in binary mode.[39;00m
[1;32m    856[0m     [38;5;66;03m# Binary mode does not support 'encoding' and 'newline'.[39;00m
[1;32m    857[0m     [38;5;28;01mif[39;00m ioargs[38;5;241m.[39mencoding [38;5;129;01mand[39;00m [38;5;124m"[39m[38;5;124mb[39m[38;5;124m"[39m [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m ioargs[38;5;241m.[39mmode:
[1;32m    858[0m         [38;5;66;03m# Encoding[39;00m
[0;32m--> 859[0m         handle [38;5;241m=[39m [38;5;28mopen[39m(
[1;32m    860[0m             handle,
[1;32m    861[0m             ioargs[38;5;241m.[39mmode,
[1;32m    862[0m             encoding[38;5;241m=[39mioargs[38;5;241m.[39mencoding,
[1;32m    863[0m             errors[38;5;241m=[39merrors,
[1;32m    864[0m             newline[38;5;241m=[39m[38;5;124m"[39m[38;5;124m"[39m,
[1;32m    865[0m         )
[1;32m    866[0m     [38;5;28;01melse[39;00m:
[1;32m    867[0m         [38;5;66;03m# Binary mode[39;00m
[1;32m    868[0m         handle [38;5;241m=[39m [38;5;28mopen[39m(handle, ioargs[38;5;241m.[39mmode)

[0;31mFileNotFoundError[0m: [Errno 2] No such file or directory: 'global-data-on-sustainable-energy.csv'
FileNotFoundError: [Errno 2] No such file or directory: 'global-data-on-sustainable-energy.csv'

